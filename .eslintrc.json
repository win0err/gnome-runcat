{
	"env": { "es2021": true },
	"plugins": ["import", "@typescript-eslint"],
	"extends": [
		"eslint:recommended",
		"plugin:@typescript-eslint/recommended"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaVersion": 2022,
		"sourceType": "module"
	},
	"settings": {
		"import/resolver": {
			"typescript": {}
		}
	},
	"ignorePatterns": ["node_modules/"],
	"rules": {
		"quotes": ["error", "single"],
		"no-tabs": "off",
		"indent": ["error", "tab"],
		"semi": ["error", "never"],
		"arrow-parens": ["error", "as-needed", { "requireForBlockBody": true }],
		"no-trailing-spaces": "error",
		"comma-dangle": ["error", "always-multiline"],
		"newline-before-return": "error",
		"no-underscore-dangle": ["error", { "allowAfterThis": true, "allowAfterSuper": true }],
		"@typescript-eslint/no-unused-vars": "error",
		"eol-last": ["error", "always"],
		"strict": "off",
		"no-plusplus": "off",
		"max-len": ["error", 120],
		"import/extensions": 0,
		"import/newline-after-import": ["error", { "count": 2 }],
		"import/no-unresolved": [2, { "ignore": ["^(resource|gi)"] }],
		"no-warning-comments": ["error", { "terms": ["fixme"], "location": "anywhere" }],
		"lines-between-class-members": [
			"error",
			{
				"enforce": [
					{ "blankLine": "always", "prev": "*", "next": "method" },
					{ "blankLine": "never", "prev": "field", "next": "field" }
				]
			}
		],
		"padding-line-between-statements": [
			"error",
			{
				"blankLine": "always",
				"prev": ["singleline-const", "singleline-let", "singleline-var"],
				"next": "*"
			},
			{
				"blankLine": "always",
				"prev": "*",
				"next": ["singleline-const", "singleline-let", "singleline-var"]
			},
			{
				"blankLine": "always",
				"next": "*",
				"prev": [
					"multiline-const",
					"multiline-let",
					"multiline-var",
					"multiline-expression",
					"multiline-block-like",
					"block-like",
					"export"
				]
			},
			{
				"blankLine": "always",
				"prev": [
					"multiline-const",
					"multiline-let",
					"multiline-var",
					"multiline-expression",
					"multiline-block-like",
					"block-like",
					"export"
				],
				"next": "*"
			},
			{
				"blankLine": "any",
				"prev": ["singleline-const", "singleline-let", "singleline-var"],
				"next": ["singleline-const", "singleline-let", "singleline-var"]
			}
		]
	},
	"globals": {
		"log": "readonly",
		"logError": "readonly",
		"TextDecoder": "readonly",
		"Intl": "readonly",
		"console": "readonly"
	}
}
